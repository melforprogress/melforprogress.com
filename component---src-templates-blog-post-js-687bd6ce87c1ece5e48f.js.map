{"version":3,"sources":["webpack:///./src/components/Content.js","webpack:///./src/templates/blog-post.js"],"names":["HTMLContent","_ref","content","className","react_default","a","createElement","dangerouslySetInnerHTML","__html","Content","_ref2","__webpack_require__","d","__webpack_exports__","blog_post_BlogPostTemplate","pageQuery","BlogPostTemplate","contentComponent","description","tags","title","helmet","PostContent","length","style","marginTop","map","tag","key","gatsby_browser_entry","to","kebabCase","BlogPost","post","data","markdownRemark","Layout","html","frontmatter","Helmet_default","titleTemplate","name"],"mappings":"kKAGaA,EAAc,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,UAAZ,OACzBC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,EAAWI,wBAAyB,CAAEC,OAAQN,MAYjDO,EATC,SAAAC,GAAA,IAAGR,EAAHQ,EAAGR,QAASC,EAAZO,EAAYP,UAAZ,OAA4BC,EAAAC,EAAAC,cAAA,OAAKH,UAAWA,GAAYD,ICPxES,EAAAC,EAAAC,EAAA,qCAAAC,IAAAH,EAAAC,EAAAC,EAAA,8BAAAE,IAQO,IAAMC,EAAmB,SAAAf,GAO1B,IANJC,EAMID,EANJC,QACAe,EAKIhB,EALJgB,iBACAC,EAIIjB,EAJJiB,YACAC,EAGIlB,EAHJkB,KACAC,EAEInB,EAFJmB,MACAC,EACIpB,EADJoB,OAEMC,EAAcL,GAAoBR,EAExC,OACEL,EAAAC,EAAAC,cAAA,WAASH,UAAU,WAChBkB,GAAU,GACXjB,EAAAC,EAAAC,cAAA,OAAKH,UAAU,qBACbC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,WACbC,EAAAC,EAAAC,cAAA,OAAKH,UAAU,4BACbC,EAAAC,EAAAC,cAAA,MAAIH,UAAU,sDAAsDiB,GACpEhB,EAAAC,EAAAC,cAAA,SAAIY,GACJd,EAAAC,EAAAC,cAACgB,EAAD,CAAapB,QAASA,IACrBiB,GAAQA,EAAKI,OACZnB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAAEC,UAAS,SACrBrB,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,MAAIH,UAAU,WACXgB,EAAKO,IAAI,SAAAC,GAAG,OACXvB,EAAAC,EAAAC,cAAA,MAAIsB,IAAKD,EAAG,OACVvB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAMC,GAAE,SAAWC,oBAAUJ,GAArB,KAA+BA,QAK7C,UA8CHZ,GAFEiB,UA5BE,SAAAtB,GAAc,IACLuB,EADKvB,EAAXwB,KACVC,eAER,OACE/B,EAAAC,EAAAC,cAAC8B,EAAA,EAAD,KACEhC,EAAAC,EAAAC,cAACQ,EAAD,CACEZ,QAAS+B,EAAKI,KACdpB,iBAAkBjB,EAClBkB,YAAae,EAAKK,YAAYpB,YAC9BG,OACEjB,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAQmC,cAAc,aACpBpC,EAAAC,EAAAC,cAAA,gBAAW2B,EAAKK,YAAYlB,OAC5BhB,EAAAC,EAAAC,cAAA,QAAMmC,KAAK,cAAcvC,QAAO,GAAK+B,EAAKK,YAAYpB,eAG1DC,KAAMc,EAAKK,YAAYnB,KACvBC,MAAOa,EAAKK,YAAYlB,UAcV","file":"component---src-templates-blog-post-js-687bd6ce87c1ece5e48f.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => <div className={className}>{content}</div>\n\nContent.propTypes = {\n  content: PropTypes.node,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport Helmet from 'react-helmet'\nimport { graphql, Link } from 'gatsby'\nimport Layout from '../components/Layout'\nimport Content, { HTMLContent } from '../components/Content'\n\nexport const BlogPostTemplate = ({\n  content,\n  contentComponent,\n  description,\n  tags,\n  title,\n  helmet,\n}) => {\n  const PostContent = contentComponent || Content\n\n  return (\n    <section className=\"section\">\n      {helmet || ''}\n      <div className=\"container content\">\n        <div className=\"columns\">\n          <div className=\"column is-10 is-offset-1\">\n            <h1 className=\"title is-size-2 has-text-weight-bold is-bold-light\">{title}</h1>\n            <p>{description}</p>\n            <PostContent content={content} />\n            {tags && tags.length ? (\n              <div style={{ marginTop: `4rem` }}>\n                <h4>Tags</h4>\n                <ul className=\"taglist\">\n                  {tags.map(tag => (\n                    <li key={tag + `tag`}>\n                      <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                    </li>\n                  ))}\n                </ul>\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </div>\n    </section>\n  )\n}\n\nBlogPostTemplate.propTypes = {\n  content: PropTypes.node.isRequired,\n  contentComponent: PropTypes.func,\n  description: PropTypes.string,\n  title: PropTypes.string,\n  helmet: PropTypes.object,\n}\n\nconst BlogPost = ({ data }) => {\n  const { markdownRemark: post } = data\n\n  return (\n    <Layout>\n      <BlogPostTemplate\n        content={post.html}\n        contentComponent={HTMLContent}\n        description={post.frontmatter.description}\n        helmet={\n          <Helmet titleTemplate=\"%s | Blog\">\n            <title>{`${post.frontmatter.title}`}</title>\n            <meta name=\"description\" content={`${post.frontmatter.description}`} />\n          </Helmet>\n        }\n        tags={post.frontmatter.tags}\n        title={post.frontmatter.title}\n      />\n    </Layout>\n  )\n}\n\nBlogPost.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object,\n  }),\n}\n\nexport default BlogPost\n\nexport const pageQuery = graphql`\n  query BlogPostByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        description\n        tags\n      }\n    }\n  }\n`\n"],"sourceRoot":""}